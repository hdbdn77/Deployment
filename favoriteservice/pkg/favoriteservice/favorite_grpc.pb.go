// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0--rc2
// source: proto/favorite.proto

package favoriteservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FavoriteActionService_FavoriteAction_FullMethodName = "/favoriteservice.FavoriteActionService/FavoriteAction"
)

// FavoriteActionServiceClient is the client API for FavoriteActionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FavoriteActionServiceClient interface {
	// rpc 服务的函数名 （传入参数）返回（返回参数）
	FavoriteAction(ctx context.Context, in *DouYinFavoriteActionRequest, opts ...grpc.CallOption) (*DouYinFavoriteActionResponse, error)
}

type favoriteActionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFavoriteActionServiceClient(cc grpc.ClientConnInterface) FavoriteActionServiceClient {
	return &favoriteActionServiceClient{cc}
}

func (c *favoriteActionServiceClient) FavoriteAction(ctx context.Context, in *DouYinFavoriteActionRequest, opts ...grpc.CallOption) (*DouYinFavoriteActionResponse, error) {
	out := new(DouYinFavoriteActionResponse)
	err := c.cc.Invoke(ctx, FavoriteActionService_FavoriteAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FavoriteActionServiceServer is the server API for FavoriteActionService service.
// All implementations must embed UnimplementedFavoriteActionServiceServer
// for forward compatibility
type FavoriteActionServiceServer interface {
	// rpc 服务的函数名 （传入参数）返回（返回参数）
	FavoriteAction(context.Context, *DouYinFavoriteActionRequest) (*DouYinFavoriteActionResponse, error)
	mustEmbedUnimplementedFavoriteActionServiceServer()
}

// UnimplementedFavoriteActionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFavoriteActionServiceServer struct {
}

func (UnimplementedFavoriteActionServiceServer) FavoriteAction(context.Context, *DouYinFavoriteActionRequest) (*DouYinFavoriteActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteAction not implemented")
}
func (UnimplementedFavoriteActionServiceServer) mustEmbedUnimplementedFavoriteActionServiceServer() {}

// UnsafeFavoriteActionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FavoriteActionServiceServer will
// result in compilation errors.
type UnsafeFavoriteActionServiceServer interface {
	mustEmbedUnimplementedFavoriteActionServiceServer()
}

func RegisterFavoriteActionServiceServer(s grpc.ServiceRegistrar, srv FavoriteActionServiceServer) {
	s.RegisterService(&FavoriteActionService_ServiceDesc, srv)
}

func _FavoriteActionService_FavoriteAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouYinFavoriteActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteActionServiceServer).FavoriteAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavoriteActionService_FavoriteAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteActionServiceServer).FavoriteAction(ctx, req.(*DouYinFavoriteActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FavoriteActionService_ServiceDesc is the grpc.ServiceDesc for FavoriteActionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FavoriteActionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "favoriteservice.FavoriteActionService",
	HandlerType: (*FavoriteActionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FavoriteAction",
			Handler:    _FavoriteActionService_FavoriteAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/favorite.proto",
}

const (
	FavoriteListService_FavoriteList_FullMethodName = "/favoriteservice.FavoriteListService/FavoriteList"
)

// FavoriteListServiceClient is the client API for FavoriteListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FavoriteListServiceClient interface {
	// rpc 服务的函数名 （传入参数）返回（返回参数）
	FavoriteList(ctx context.Context, in *DouYinFavoriteListRequest, opts ...grpc.CallOption) (*DouYinFavoriteListResponse, error)
}

type favoriteListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFavoriteListServiceClient(cc grpc.ClientConnInterface) FavoriteListServiceClient {
	return &favoriteListServiceClient{cc}
}

func (c *favoriteListServiceClient) FavoriteList(ctx context.Context, in *DouYinFavoriteListRequest, opts ...grpc.CallOption) (*DouYinFavoriteListResponse, error) {
	out := new(DouYinFavoriteListResponse)
	err := c.cc.Invoke(ctx, FavoriteListService_FavoriteList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FavoriteListServiceServer is the server API for FavoriteListService service.
// All implementations must embed UnimplementedFavoriteListServiceServer
// for forward compatibility
type FavoriteListServiceServer interface {
	// rpc 服务的函数名 （传入参数）返回（返回参数）
	FavoriteList(context.Context, *DouYinFavoriteListRequest) (*DouYinFavoriteListResponse, error)
	mustEmbedUnimplementedFavoriteListServiceServer()
}

// UnimplementedFavoriteListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFavoriteListServiceServer struct {
}

func (UnimplementedFavoriteListServiceServer) FavoriteList(context.Context, *DouYinFavoriteListRequest) (*DouYinFavoriteListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteList not implemented")
}
func (UnimplementedFavoriteListServiceServer) mustEmbedUnimplementedFavoriteListServiceServer() {}

// UnsafeFavoriteListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FavoriteListServiceServer will
// result in compilation errors.
type UnsafeFavoriteListServiceServer interface {
	mustEmbedUnimplementedFavoriteListServiceServer()
}

func RegisterFavoriteListServiceServer(s grpc.ServiceRegistrar, srv FavoriteListServiceServer) {
	s.RegisterService(&FavoriteListService_ServiceDesc, srv)
}

func _FavoriteListService_FavoriteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouYinFavoriteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteListServiceServer).FavoriteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FavoriteListService_FavoriteList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteListServiceServer).FavoriteList(ctx, req.(*DouYinFavoriteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FavoriteListService_ServiceDesc is the grpc.ServiceDesc for FavoriteListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FavoriteListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "favoriteservice.FavoriteListService",
	HandlerType: (*FavoriteListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FavoriteList",
			Handler:    _FavoriteListService_FavoriteList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/favorite.proto",
}
