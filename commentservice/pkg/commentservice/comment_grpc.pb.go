// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0--rc2
// source: proto/comment.proto

package commentservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CommentActionService_CommentAction_FullMethodName = "/commentservice.CommentActionService/CommentAction"
)

// CommentActionServiceClient is the client API for CommentActionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentActionServiceClient interface {
	// rpc 服务的函数名 （传入参数）返回（返回参数）
	CommentAction(ctx context.Context, in *DouYinCommentActionRequest, opts ...grpc.CallOption) (*DouYinCommentActionResponse, error)
}

type commentActionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentActionServiceClient(cc grpc.ClientConnInterface) CommentActionServiceClient {
	return &commentActionServiceClient{cc}
}

func (c *commentActionServiceClient) CommentAction(ctx context.Context, in *DouYinCommentActionRequest, opts ...grpc.CallOption) (*DouYinCommentActionResponse, error) {
	out := new(DouYinCommentActionResponse)
	err := c.cc.Invoke(ctx, CommentActionService_CommentAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentActionServiceServer is the server API for CommentActionService service.
// All implementations must embed UnimplementedCommentActionServiceServer
// for forward compatibility
type CommentActionServiceServer interface {
	// rpc 服务的函数名 （传入参数）返回（返回参数）
	CommentAction(context.Context, *DouYinCommentActionRequest) (*DouYinCommentActionResponse, error)
	mustEmbedUnimplementedCommentActionServiceServer()
}

// UnimplementedCommentActionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommentActionServiceServer struct {
}

func (UnimplementedCommentActionServiceServer) CommentAction(context.Context, *DouYinCommentActionRequest) (*DouYinCommentActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentAction not implemented")
}
func (UnimplementedCommentActionServiceServer) mustEmbedUnimplementedCommentActionServiceServer() {}

// UnsafeCommentActionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentActionServiceServer will
// result in compilation errors.
type UnsafeCommentActionServiceServer interface {
	mustEmbedUnimplementedCommentActionServiceServer()
}

func RegisterCommentActionServiceServer(s grpc.ServiceRegistrar, srv CommentActionServiceServer) {
	s.RegisterService(&CommentActionService_ServiceDesc, srv)
}

func _CommentActionService_CommentAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouYinCommentActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentActionServiceServer).CommentAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentActionService_CommentAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentActionServiceServer).CommentAction(ctx, req.(*DouYinCommentActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentActionService_ServiceDesc is the grpc.ServiceDesc for CommentActionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentActionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "commentservice.CommentActionService",
	HandlerType: (*CommentActionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommentAction",
			Handler:    _CommentActionService_CommentAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/comment.proto",
}

const (
	CommentListService_CommentList_FullMethodName = "/commentservice.CommentListService/CommentList"
)

// CommentListServiceClient is the client API for CommentListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentListServiceClient interface {
	// rpc 服务的函数名 （传入参数）返回（返回参数）
	CommentList(ctx context.Context, in *DouYinCommentListRequest, opts ...grpc.CallOption) (*DouYinCommentListResponse, error)
}

type commentListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentListServiceClient(cc grpc.ClientConnInterface) CommentListServiceClient {
	return &commentListServiceClient{cc}
}

func (c *commentListServiceClient) CommentList(ctx context.Context, in *DouYinCommentListRequest, opts ...grpc.CallOption) (*DouYinCommentListResponse, error) {
	out := new(DouYinCommentListResponse)
	err := c.cc.Invoke(ctx, CommentListService_CommentList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentListServiceServer is the server API for CommentListService service.
// All implementations must embed UnimplementedCommentListServiceServer
// for forward compatibility
type CommentListServiceServer interface {
	// rpc 服务的函数名 （传入参数）返回（返回参数）
	CommentList(context.Context, *DouYinCommentListRequest) (*DouYinCommentListResponse, error)
	mustEmbedUnimplementedCommentListServiceServer()
}

// UnimplementedCommentListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommentListServiceServer struct {
}

func (UnimplementedCommentListServiceServer) CommentList(context.Context, *DouYinCommentListRequest) (*DouYinCommentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentList not implemented")
}
func (UnimplementedCommentListServiceServer) mustEmbedUnimplementedCommentListServiceServer() {}

// UnsafeCommentListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentListServiceServer will
// result in compilation errors.
type UnsafeCommentListServiceServer interface {
	mustEmbedUnimplementedCommentListServiceServer()
}

func RegisterCommentListServiceServer(s grpc.ServiceRegistrar, srv CommentListServiceServer) {
	s.RegisterService(&CommentListService_ServiceDesc, srv)
}

func _CommentListService_CommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouYinCommentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentListServiceServer).CommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentListService_CommentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentListServiceServer).CommentList(ctx, req.(*DouYinCommentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentListService_ServiceDesc is the grpc.ServiceDesc for CommentListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "commentservice.CommentListService",
	HandlerType: (*CommentListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommentList",
			Handler:    _CommentListService_CommentList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/comment.proto",
}
